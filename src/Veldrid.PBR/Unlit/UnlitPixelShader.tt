<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#version 450

<#
if (_key.HasFlag(UnlitShaderFlags.HasBaseColorMap)) Write("#define HAS_BASE_COLOR_MAP\r\n");
#>

struct MapUV
{
    vec3 X;
    int Set;
    vec3 Y;
};

layout (set=1, binding=0) uniform UnlitMaterialArguments
{
    vec4 BaseColorFactor;
    float AlphaCutoff;
    MapUV BaseColorMapUV; 
};
#ifdef HAS_BASE_COLOR_MAP
layout (set=1, binding=1) uniform texture2D BaseColorTexture;
layout (set=1, binding=2) uniform sampler BaseColorSampler;
#endif

layout(location = 0) in vec4 v_Color0;
layout(location = 1) in vec2 v_UVCoord0;
layout(location = 2) in vec2 v_UVCoord1;

layout(location = 0) out vec4 fsout_color;

const float GAMMA = 2.2;
const float INV_GAMMA = 1.0 / GAMMA;

// linear to sRGB approximation
// see http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html
vec3 LINEARtoSRGB(vec3 color)
{
    return pow(color, vec3(INV_GAMMA));
}

// sRGB to linear approximation
// see http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html
vec4 SRGBtoLINEAR(vec4 srgbIn)
{
    return vec4(pow(srgbIn.xyz, vec3(GAMMA)), srgbIn.w);
}

vec2 getBaseColorUV()
{
    vec3 uv = vec3(v_UVCoord0, 1.0);
#ifdef HAS_BASE_COLOR_MAP
    uv.xy = BaseColorMapUV.Set < 1 ? v_UVCoord0 : v_UVCoord1;
    uv *= mat3(BaseColorMapUV.X,BaseColorMapUV.Y,vec3(0,0,1));
#endif
    return uv.xy;
}

void main()
{
    vec4 baseColor = v_Color0 * BaseColorFactor;

    // The albedo may be defined from a base texture or a flat color
#ifdef HAS_BASE_COLOR_MAP
    baseColor = SRGBtoLINEAR(texture(sampler2D(BaseColorTexture, BaseColorSampler), getBaseColorUV())) * baseColor;
#endif

    fsout_color = vec4(LINEARtoSRGB(baseColor.rgb), baseColor.a);
}